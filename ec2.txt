EC2 : Elastic Compute Cloud :  Instance = Server
Terminate = Delete

Pay-as-you-go : 

Client class os : win7, win 10
Server class os : server 2012 r2, 2016, 2019, linux server os.. 


laptop/server : workload 
Memory, RAM : 8 gb / 12 gb / 16 gb
HDD : 500 gb / 1 tb
CPU : 2 vcpu cores 


On-Demand ec2 instance : When we have Unpredictable workloads, Testing for the first time.. "FREE TIER ELIGIBILITY"
Pricing : /Sec (Min of 60 Sec) / /hr
__

Reserved ec2 Instances : When our workload is stable and predictable.. For longer durations.. We need to reserve the capacity for 1 Yr/3 yrs.
"NO FREE TIER ELIGIBILITY"

	Standard RI : We cannot change the configuration during the period.
	Convertable RI : We can change the configuration. (upgrade)
	Scheduled RI : If we have persistent / repeated requests. (N Virginia)

Pricing : 
	Full upfront : Pay 100% as onetime.
	Partial upfront : Pay 30-50% as onetime, THen remaining amount on monthly basis with redused hrly price.
	No Upfront : Pay everything monthly basis.

--> We can sell RI instances in AWS MarketPlace.
__
Spot ec2 instances : When we have flexible start/stop durations.. No critical data/application is delivering.. Test/UAT.. Bid your price against the aws pricing. 

--> If your quoted price is more than or equal to aws price, we will get an EC2 instance.
--> If price increased, aws will Terminate our ec2 instance.

If price increased "AWS termnated instance", we need to pay only completed billing hours.
If price not increased "YOU termnated instance", we need to pay for full usage hours.

1 hr 59 Min : AWS terminated : 1 Hr
1 Hr 30 Min : YOU terminated : 1 Hr 30 Min

"NO FREE TIER ELIGIBILITY"
________________________________
Shared tenancy : Underlying resources shares with multiple customers.
Dedicated tenancy : Underlying resources dedicatedly available to only one aws account. 
	--> Dedicated Instance : 
	--> Dedicated Host : 
_________________________________________________________________________________________

D: 04/09/2021

Only On-Demand ec2 instances comes under free tier eligibility.

Windows ec2 instance launch : 

Step 1 : Choose an AMI (Amazon Machine Image)	: Operating System : Windows server 2016 base
	
Step 2 : Choose an Instance type 		: vCPU, Memory(RAM), Network perf
__ t2.micro


General Purpose : Stable/balanced performance of compute, memory and network resources.
Type : t2, t3, m5

Compute Optimized : We will get more CPU performances from these instances. We will have high perf processors in these instances.
Type : c4, c5, c6  (Compute / CPU)

Memory Optimized : We will get more RAM perf. Workloads required to process large set of data via memory.
Type : r4, r5, r6, x1, z1 (RAM)

GPU Optimized / Accelerated computing : We will get more graphic processings, Efficient for data pattern matching, High level gaming.
Type : p2, p3, p4, g3, g4, f1  

Storage optimized : we will get more Storage/ Hard Disk performance. FOr the application required more IOPS, we use this types.
Type : d2, d3, i3

m5.large	: 2 CPU, 8 RAM
c5.xlarge	: 4 cpu, 8 ram
t3.medium	: 2 cpu, 4 ram

Maintenance windows : Sat 06 AM IST.. : greenzone window

Step 3 : Configure additional settings
	VPC, ROles, userdata

	Instance Termination protection : Enable
	Shutdown behaviour : STOP


Step 4 : Choose storage

	root volume : volume that contains Operating system : 30 gb for windows

Step 5 : Add Tags : COmbination of Key and Value pairs.

Name : 
Project : 
Platform : Windows / Linux
COst center : AAZAA

Step 6: Configure Security Group : Security group acts as Firewall at Instance level.

OS Ports/protocols : 0 - 65535

Windows : RDP : 3389 : 
Linux : SSH : 22
Webserver : http : 80
Secure web : https : 443
mysql : 3306
mssql : 1433


source : From where you want to connect to this instance.
MyIP : It picks currently connected network ip address. No one can connect to the server apart from this particular network users.
Custom : We can give any network IPs. 
Anywhere : Anyone with valid credentials can connect to the server. (username and pwd)

Step 7 : Review and launch with keypair.

Keypair : Key pair contains public key and private key. (.pem)

AWS Holds the Public Key. This will be stored in our launched ec2 instances.
Customer/WE holdes the Private key. Used to decrypt/generate the password for initial instance connect.

Public IP : Unique across the globe : Use this to connect to your instance.
Private IP : Unique with in the aws network : 


COnnect to Windows Instance :

--> Open "run" , type "mstsc" , CLick enter.. Provide instance "Public IP".
--> Choose instance "connect', choose "RDP Client", "Download remote desktop file"

MAC : https://apps.apple.com/us/app/microsoft-remote-desktop/id1295203466?mt=12


start/stop : 10 days work.. 1 month.. : Stop, Start the server
Terminate : Delete the server..


Task : Launch windows ec2 instance and using keypair get connect to ec2 instance.

Task 2 : CHange the password of "Administrator", Disconnect from the instance. Now try to login to ec2 instance using "keypair pwd" , "Custom password".

Task 3 : Create a user in ec2 instance provide him "Local administrator rights", also provide him "Remote desktop permissions".. Take a session with this user along with administrator.

________________________________________________________________________________________

D: 06/09/2021

EC2 Pricing : 
1. How many hrs our server is running. (t2.micro: 750 Hrs/Month)
2. How much volume size is provised and associated to instance. (30 gb)

FREE TIER : 750 Hrs/Month t2.micro windows instance (ondemand)
750 Hrs/Month t2.micro Linux instance (ondemand)

1 instance x 24 hrs x 31 days = 744 Hrs 	--> 750 Hrs Free tier
2 instance x 24 hrs x 16 days = 768 Hrs		

Step 4 : CHoose Storage

--> EBS : Elastic Block Storage
SSD / HDD / Magnetic

General purpose SSD : gp2 / gp3
Provisioned iops SSD : io1 / io2 / io3*

Throughput optimized HDD : st1 : 
Cold hdd : sc1 

Magnetic : standard

IOPS : Input and Output Operations per second

root Volume : COntains OS : gp2, gp3, io1, io2 and standard/magnetic
Additional volume : st1, sc1

General Purpose SSD : (gp2 / gp3) : Low latency interactive applications, Dev and test environment..!!
Min : 1 GiB, Max: 16 TiB... Max IOPS: 16,000 IOPS
gp2 --> works 1 : 3 ration (1 gb volume = 3 iops), with min of 100..

for gp3, we have an advantage, we can mention/choose required IOPS count.

__

Provisioned iops : (io1 & io2) : workload that requires Specific IOPS count.. or if we need more than 16,000 iops for our ec2 instance.. I/O Intensive database workloads..
Min : 4 GiB, Max: 16 TiB... Max IOPS: 64,000 IOPS
--> It provided highest performance among all. 

io2 Block Express volume : Min : 4 GiB, Max: 64 TiB...
SUpports 256,000 IOPS.. 
__

Magnetic : Standard : Less freq accessed data, Low cost storage solutions.. 
Min : 1 GiB, Max: 1 TiB...
__

Throughput optimized HDD : st1 : Bigdata, Data warehousing, log processing.. 
Size : Min 125 GiB - 16 TiB.. IOPS : 500.. Throughput : 500 MB/S..

Cold HDD : sc1 : THroughput orientes storages, but with Less Frequently accessed.. Lower cost than st1.. 
Size : Min 125 GiB - 16 TiB.. IOPS : 250.. Throughput : 250 MB/S..


Free Tier : 30 gb Gp2 and standard storage.. 

--> 10% of volume size (or) 5 gb.. WHichever is highest

** Need to perform OS level operations to make additional volumes available.
--> Disk Management --> diskmgmt.msc --> choose volume --> make it online --> Initilize disk --> SImple volume --> NTFS/FAT --> Create

Windows : FAT, FAT32, NTFS, ReFS
Linux : ext3, ext4, xfs


Instance 1 in ap-south-1a ---> Instance 2 in ap-south-1a ==> Detach from instance 1 and attach to instance 2.. 

Instance 1 in ap-south-1a ---> Instance 2 in ap-south-1b ==> Detach from instance 1 and attach to instance 2 is not possible as both are running in diff AZs.. 
Choose the volume --> Take a Snapshot --> Create a volume, while creating choose ap-south-1b --> volume in 1b --> Attach to Instance 2 running in ap-south-1b

Instance 1 in Mumbai : ap-south-1a ---> Instance 2 in N Virginia : us-east-1a ==> Detach from instance 1 and attach to instance 2 is not possible as both are running in diff regions.. 
Choose the volume --> Take a Snapshot --> Copy the snapshot to desired region (NV) 
--> Create a volume, while creating choose us-east-1a --> volume in 1a --> Attach to Instance 2 running in N Virginia : us-east-1a.
(Data transfer from region to region cost us)


Instance 1 in AWSACC1 : Mumbai : ap-south-1a ---> Instance 2 in AWSACC2 : Mumbai : ap-south-1a ==> Detach from instance 1 and attach to instance 2 is not possible as both are running in diff aws accounts, regions.. 
Choose the volume --> Take a Snapshot --> share the snapshot to another aws account 
--> Create a volume, while creating choose ap-south-1a in acc2

Instance 1 volume need to share with everyone.. --> Create a snapshot --> Share to "Public" --> 


MultiAttach : https://www.youtube.com/watch?v=2j8R3ajSo3s


Task 1 : Launch an ec2 instance in ap-south-1a.. Create a "New volume with 1 gb size" in ap-south-1a and attach this volume to ec2 instance and make it available. Goto AWS console "Increase the volume size to 2 GB", make this 2gb volume available at OS level.

Task 2 : Launch an ec2 instance in ap-south-1a... Another ec2 instance in ap-south-1b..
Create a volume in ap-south-1a.. Attach it to "1a instance" and make it available.. Write some data into it..
Make Same volume available to "1b instance"..!!

__________________________________________________________________________________

D: 07/09/2021

EBS VOlumes : Always use EBS volumes only.
Instance store volumes : We really don't use this in real environments.   (NO FREE TIER ELIGIBILTY)
	--> Also called as Ephemeral storages (Temporary storage).
	--> We cannot STOP/Start the instance.
	--> Storage will be delivered from underlying host/physical resources.
	--> If required, we can reboot. We don't loss any data.
	--> If underlying h/w failure happens we'll loss all the data.

Snapshot : Backup copy of an EBS volume.

https://aws.amazon.com/blogs/storage/automating-amazon-ebs-snapshot-and-ami-management-using-amazon-dlm/

SOP : Standard Operational Procedure : 

DLM : Data Lifecycle manager : Automate the snapshot creation process. 
--> We use tags to filter the resources. 

Fast snapshot restore : Enable fast snapshot restore to ensure that volumes created from snapshots created by this policy instantly deliver all of their provisioned performance.

--> Snapshots are point-in-time copies.
--> Snapshots stores in S3 platform (Not in your s3).
--> Can we view what data we have inside snapshots..?? NO
--> Snapshot Works with Incremental backup mechanism. 
--> If our volume is Encrypted, Snapshot also Encrypts automaticALLY. 
--> When we are launching a volume from encrypted snapshot, volume also encrypts automatically.
--> We cannot share an Default Master key Encrypted snapshot.
--> If we are using Custom encryption key, we can share snapshot with another aws account, but we need to provide permissions on encryption key also to another aws account.

___________

How to Install IIS./ How to make windows server as webserver..!! 
--> C:/inetpub/wwwroot/ 
Make sure your ec2 instance security group is opened with port 80.

Task 1 : Make your ec2 instance as webserver.
Task 2 : https://aws.amazon.com/blogs/storage/automating-amazon-ebs-snapshot-and-ami-management-using-amazon-dlm/

_____________________________________________________________________________________

D: 08/09/2021

EIP : Elastic IP Address : Dedicated IP address we will get from AWS. We can associate this to an ec2 instance. When Instance is STOP/START, this IP won't change.
(COST US : NO FREE TIER ELIGIBILITY, EVEN if you generated kept it idle)


ENI : Elastic Network Interface : NIC CARD for Instance.. : 
--> EC2 instance and ENI should be in same AZ.

0.0.0.0/0 --> IPv4
::/0 --> IPv6

http://localhost/ or http://127.0.0.1/

** Security Groups : http / https traffic.. 
--> CHanges to the Security group takes effect immedeately. (No need to stop/start the instance). 
--> Security group won't support DENY. It allow the traffic. 
--> Security groups are stateful. We need to take care about INBOUND RULES only. 
--> All the Outbound traffic is allowed for every security groups. 


Whenever we launch an ec2 instance, 2 status checks will happen. 
-> System Status check : H/w is healtlhy or not at Physical resource level. (STOP/START)
-> Instane status check : OS level issues.
__
Tenancy in AWS : 
--> Shared Tenancy : Underlying hardware/resources will be shared with multiple AWS customers. 
--> Dedicated Tenancy : Underlying hardware/resources will dedicatedly available to only one AWS customer. It won't share with any other.
	--> Dedicated Instance : 
	--> Dedicated Host : Host supports to launch multiple instances. Some applications required physical resources inforamtion to apply the licenses. 


Task : Launch a windows ec2 instance, make it as "Web Server", Test the "Security groups".


https://join.slack.com/t/awswithavinash/shared_invite/zt-ozg7f9gx-lGdrFMlaOAc_BiPl4V~f4w

_______________________________________________________________________________________

D: 09/09/2021

Scenario : 10 ec2 instances.. AV, MS Office, Custom WP, CUstom OS users, Applications, IIS.. 

--> Launching 10 instance : connect to 10 instance and install everything in all 10 instance.. 
--> 1 ec2 instance : Install everything.. : Keep it as Image : --> Launch "n" number using image..

Client : OS with CIS Benchmarks (Center for Internet Security) : 

*** GoldenAMI = CUstomized AMI.. Won't work with keypairs.. We need to change the password.. 

Ec2 instance , Perform customizations --> Create a Golden AMI --> From GAMI we can launch n num of ec2 instance.. 

Similar to Snapshots..

--> We can launch another instance in same region using GAMI.
--> We can copy Region 1 GAMI to Region 2, And launch an ec2 instance in Region 2. 
--> We can share GAMI from Acc 1 to Acc 2. 
--> We can share GAMI to public.

_____________________

Linux OS : Amazon Linux 2 OS.. RHEL, Ubuntu, Suse, Kali

RedHat, CentOS --> Amazon Linux 


Step 1 : Choose an AMI (Amazon Machine Image)	: Operating System : Amazon Linux 2 
	
Step 2 : Choose an Instance type : t2.micro	: vCPU, Memory(RAM), Network perf

Step 3 : Configure additional settings
	VPC, ROles, userdata

	Instance Termination protection : Enable
	Shutdown behaviour : STOP

Step 4 : Choose storage

	root volume : volume that contains Operating system : 8/10 gb for linux

Step 5 : Add Tags : COmbination of Key and Value pairs.

Name : 
Project : 
Platform : Windows / Linux
Cost center : AAZAA

Step 6: Configure Security Group : Security group acts as Firewall at Instance level.

Linux : SSH : 22 : Anywhere
Webserver : http : 80
Secure web : https : 443

Step 7 : Review and launch with keypair.

Keypair : Key pair contains public key and private key. (.pem)

How to Connect to Linux Instance :

--> Select Instance, click on "Connect" --> "ec2 instance connect" --> "ec2-user" --> Connect. (We don't use this in realtime)
___

--> We can use windows Cmd prompt to connect to Linux Instance : Install "OpenSSH" in your laptop. 
	--> apps&features --> optional features --> openssh client--> Enable/Install.

==> ssh -i keypair.pem ec2-user@publicip/dns
ssh -i "linuxkp.pem" ec2-user@ec2-3-108-53-198.ap-south-1.compute.amazonaws.com

__

Putty : Putty Don't support .pem format files.. Putty need .ppk (putty private key) file format. 
1 --> generate a .ppk file, before launching linux instance and use the .ppk file to connect using putty application.
2 --> Convert the existing .pem file to .ppk file using PuttyGEN application. 

https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html	--> Download putty

__

Install "GIT for Windows", Then use GIt terminal to connect. 

https://git-scm.com/download/win

--> go to the location where we have the keypair, "Git Bash here"


Bad Permissions error :  chmod 400 keypair.pem  (Works with GIT for Windows)


Task : Launch a windows instance and install IIS, Custom WP, Timezone.. and create a GoldenAMI and Launch instance from GAMI and verify all settings.

Task 2 : Launch and connect to amazon linux 2 ec2 instance.

_________________________________________________________________________________________

D: 11/09/2021

Linux Instances : Default username : ec2-user  / redhat / ubuntu

whoami		--> tels us as what user we are working.
sudo		--> allow user to execute the command with root level permissions
sudo su		--> Switch to root user
exit		--> Exit from root user to ec2-user
clear		--> Clears the screen

ls		--> List the files/folders
ls -a		--> List all including hidden files
pwd		--> Print working directory
mkdir		--> Create a Directory/Folder
touch 		--> o bytes file/ plain file
cd		--> Change directory

copy and paste :  cp
cut and paste  :  mv

to rename a file we use "mv" command :  mv oldfilename newfilename

vim / vi / nano

VIM Editor : 

vim filename	--> Open this file in VIM editor

Press I		--> INSERT Mode
Press ESC	--> ReadOnly Mode
:wq		--> Write and Quit (Write changes to file and quit the editor)
:q!		--> Quit the Editor without writing the changes
__

Req: Make this linux Instance as Web Server (Apache).

rpm : Redhat package manager
yum : Yellowdog Update manager

yum install httpd -y
service httpd status			--> httpd webserver service status
service httpd start/stop/restart
chkconfig httpd on			--> Makes httpd as logon service.

path : /var/www/html/

cd /var/www/html/

Tool to Move the files to amazon linux ec2 instance : WinSCP
_________________________


Task 1 : Launch Amazon Linux 2 Instance, Connect to the instance. 
Task 2 : Launch a linux ec2 instance and make it as webserver, deliver the custom webpage. "Use Apache"
Task 3 : Launch a Linux 2 ec2 instance and make it as webserver using "Nginx". 

______________________________________________________________________________________

https://www.udemy.com/course/jenkinswithavinash/?couponCode=SEP021
https://www.udemy.com/course/linuxwithavinash/?couponCode=SEP021


D: 13/09/2021

Windows : FAT, FAT32, NTFS, ReFS
Linux : ext3, ext4, xfs

grab the name of new volume : /dev/xvdb

lsblk		--> List block based devices
df -Th		--> List the available volumes

/dev/xvda1	--> root volume (/)
/dev/xvdf	--> new Volume name 

In windows OS, we mount new volumes to drive letters.. But in Linux OS, We mount volumes to Directory. 

mkdir newvolume

file -s /dev/xvdf  	--> If this command returns with "data", no file system.
			--> If this returns ext3/xfs filesystem.. We have a file system.


mkfs -t xfs /dev/xvdf		--> Make file system and write it to Additonal volume

mount /dev/xvdf newvolume/	--> mount addl volume to directory

--> Above mount is temp mount only.. it won't available after the instance reboot.
--> To make this volume perm mount to the directory, Add entry in "/etc/fstab" file.
--> Get the entry information from "/etc/mtab" file. 

--> cat /etc/mtab		--> Grab the entry related to newly added addl volume

/dev/xvdf /home/ec2-user/newvolume xfs rw,relatime,attr2,inode64,noquota 0 0

--> vim /etc/fstab.. Write the above entry, save and quit the editor. (Do not edit the existing entry).

mount -all
__________
--> Increase the volume size the "Cosole" first, then execute the below command..!!

We can use "xfsprogs" to increase existing volume size. 

yum install xfsprogs

--> xfs_growfs -d /volume-Mountpoint
--> xfs_growfs -d /home/ec2-user/newvolume

_______________________

GoldenAMI on Linux : 

How to recover a Linux instance, if we lost Keyapir..!!!
Ans : Choose the Instance --> Create a GAMI --> Launch from GAMI with New Keypair.


Task 1 : Launch linux ec2 instance with 8gb root volume. Add additional "1 gb" volume to ec2 instance and make it available at OS level.

Task 2 : Increase the size of the "1 gb" volume to "2 gb" we used in task 1, make it available.

Task 3 : Install webserver is Linux instance, Create a golden AMI of the linux instance. 
While launching instance from goldenAMi, In final step, choose a new keypair. try to login to instance with both the keypairs. 

_______________________________________________________________________________________

Userdata : We can pass commands to execute within our ec2 instance when we launch for the first time. 

Linux : #!/bin/bash

#!/bin/bash
yum install httpd -y
service httpd start
chkconfig httpd on
echo "<h1> This is my BSS Webserver </h1>" > /var/www/html/index.html

#cloud-init

Windows : <powershell> commands </powershell>
<script> commands </script>
<persist>true</persist>





